 
 let _: () = redis::pipe()
        .atomic()
        .set("kakka", "pylly")
        .expire("kakka", 600)
        .query_async(&mut con)
        .await?;

    // 1) Create Connection
    let client = Client::open("redis://127.0.0.1/")?;
    let mut con = client.get_tokio_connection().await?;

    // 2) Set / Get Key
    con.set("my_key", "Hello world!").await?;
    let result: String = con.get("my_key").await?;
    println!("->> my_key: {}\n", result);

    // 3) xadd to redis stream
    con.xadd(
        "my_stream",
        "*",
        &[("name", "name-01"), ("title", "title 01")],
    )
    .await?;
    let len: i32 = con.xlen("my_stream").await?;
    println!("->> my_stream len {}\n", len);

    // 4) xrevrange the read stream
    let result: Option<StreamRangeReply> = con.xrevrange_count("my_stream", "+", "-", 10).await?;
    if let Some(reply) = result {
        for stream_id in reply.ids {
            println!("->> xrevrange stream entity: {}  ", stream_id.id);
            for (name, value) in stream_id.map.iter() {
                println!("  ->> {}: {}", name, from_redis_value::<String>(value)?);
            }
            println!();
        }
    }
